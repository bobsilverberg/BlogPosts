What is Software Craftsmanship?

Software Crafstmanship is a <em>movement</em>, for lack of a better word, in the software development industry that I have been following for
the better part of the past year. I'll follow the tired, yet often helpful, practice of quoting the 
<a href="http://en.wikipedia.org/wiki/Software_craftsmanship" target="_blank">Wikipedia definition</a> to give you a bird's eye view:</p>
<blockquote>
<p>Software craftsmanship is an approach to software development that emphasizes the coding skills of the software developers themselves. 
It is a response by software developers to the perceived ills of the mainstream software industry, 
including the prioritization of financial concerns over developer accountability.</p>
<p>Historically programmers have been encouraged to see themselves as practitioners of the statistical and mathematical rigor 
of an engineering approach with the connotations of predictability, precision, mitigated risk and professionalism. 
This perspective led to calls for licensing, certification and codified bodies of knowledge as mechanisms for maturing the field.</p>
<p>The Agile Manifesto, with its emphasis on "individuals and interactions over processes and tools" questioned some of these assumptions. 
The Software Craftsmanship Manifesto extends and challenges further the assumptions of the Agile Manifesto, 
drawing a metaphor between modern software development and the apprenticeship model of medieval Europe.</p>
</blockquote>
<p>Now I'm far from an expert on Software Craftsmanship. In fact I'd say it would be a stretch to even refer to myself as part of the movement,
but I am definitely a fan. A big fan. There are certain aspects of what I understand Software Craftsmansip to be that really speak to me,
not just as a developer but as a person. I've learned pretty much all that I know about Software Craftsmanship by reading blog posts by some of the
movement's most knowledable and eloquent members, and I also subscribe to the 
<a href="http://groups.google.com/group/software_craftsmanship" target="_blank">Software Craftsmanship mailing list</a>.</p>
<p>I've long been interested
in writing about the topic in the hopes of sharing it with members of our community, but, to be perfectly honest, I've been wary of writing
about something of which I know so little. Let me rephrase that. I feel like I <em>do</em> know a reasonable amount about it, 
but every time I think about writing a blog post on the subject
I start doing research and then, several hours later, realize that I have only succeeded in learning that there is even more that I do not know.</p>
<p>So why am I writing this post? I have a very simple, and somewhat arbitrary reason for
doing so. This week has been declared Software Craftsmanship Week by some members of the movement. It is a week designed to promote the 
ideas of Software Craftsmanship, and to attempt to share those ideas with people outside of the movement. This was exactly the kick in the
pants that I needed to start trying to share these ideas with our community. The idea of Software Craftsmanship Week is to write one post a day
for an entire week on the subject of Software Craftsmanship, and I'm going to try to accomplish that terrifying feat. You may have noticed that
I haven't done a very good job of answering the question asked in the title of this post. I'm giving myself a week to do so. I hope, both for
your sake and mine, that by the end of this week you <em>will</em> have a better idea of what Software Craftsmanship is. Wish me luck!</p>
