Quick Git Command Line Tips

Now that I'm playing with Git, I'm staring to use the command line a bit. I'm newly on a Mac, and I've never used Unix before, so I know next to nothing about what I can do with the shell. I've been watching some of the excellent screencasts available from <a href="http://github.com/guides/git-podcasts" target="_blank">GitCasts</a> and I picked up a few tips that I thought I'd share here.  If you're already familiar with Git and/or the shell there's probably nothing earthshattering for you here.</p>
<p>View your .gitconfig file:<code>cat ~/.gitconfig</code></p>
<p>Create a new local Git repo:<code>cd /your_project_directory
git init</code>
</p>
<p>Ignoring files globally<code>git config --global core.excludesfile '/Users/Username/.gitignore'</code>
http://tech.puredanger.com/2008/05/17/git-ignore-files/
</p>


Git-SVN Crach Course http://git.or.cz/course/svn.html

http://www.mactricksandtips.com/2008/10/customizing-the-mac-terminal-bash-prompt.html

One final area of customizing the bash prompt I would like to show you is the history. This comes in part from the TextMate blog. What you can do is increase or decrease the history size, remove duplicates and make sure it saves your history on the exit of the shell. This can be done through these three commands in your bash_profile file.

export HISTCONTROL=erasedups
export HISTSIZE=10000
shopt -s histappend



Create an alias to point to your repos

.bash_profile in your home folder.  

terminal:  "nano .bash_profile"
alias gitRepos='cd /Users/robertsilverberg/Documents/gitRepos'

<h3>Viewing your .gitconfig file</h3>

<p>I started out by watching a video that I found linked to somewhere. The video, <a href="http://developer.yahoo.com/yui/theater/video.php?v=prestonwerner-github" target="_blank"><em>Tom Preston-Werner, Chris Wanstrath and Scott Chacon â€” Git, GitHub and Social Coding</em></a> consists of three presentations by the guys that created <a href="http://github.com/" target="_blank">GitHub</a>. The first one, by Tom Preston-Werner, provided a nice overview of Git and GitHub - I found it quite useful. The second one, by Chris Wanstrath, went into more detail about GitHub itself. Although this is not necessary information for using Git, I found it to be quite inspirational. I began to see how not only is Git a cool version control tool, but how combining it with with something like GitHub can potentially help an open source project get more contributors, as it really lowers the barrier to entry. The final presentation, by Scott Chacon was way over my head.  I didn't get much out of it, but may view it again in the future when I become proficient with Git.</p>
<p>Having attained a basic understanding of Git, I decided that it was time to install it, and attempt to move one of my open source projects to GitHub. I found a number of blog posts that cover getting started with Git, including a very useful series by <a href="http://www.henke.ws/" target="_blank">Mike Henke</a>, which starts with <a href="http://www.henke.ws/post.cfm/setting-up-a-riaforge-projects-with-git-and-github-part-1" target="_blank"><em>Setting Up a Riaforge Project with Git and Github (Part 1)</em></a>. Mike's posts cover setting up Git on Windows, and as I'm on a Mac I needed some more information. I found a post by <a href="http://www.jaisenmathai.com/" target="_blank">Jaisen Mathai</a> entitled <a href="http://www.jaisenmathai.com/blog/2008/04/10/how-to-get-started-hosting-your-git-repository-using-github-and-osx/" target="_blank"><em>How to get started hosting your git repository using GitHub and OSX</em></a>, which included most of the setup instructions, as well as a post by <a href="http://theappleblog.com/author/bed42/" target="_blank">Andrew Bednarz</a> on theAppleBlog called <a href="http://theappleblog.com/2009/03/10/using-git-with-os-x-6-tools-to-get-you-up-and-running/" target="_blank"><em>Using Git With OS X: 6 Tools to Get You Up and Running</em></a> which directed me to some of the software. I decided to take all of the information that I gleaned from those resources are compile it into this one post, for others that would like to get started with Git and GitHub on a Mac.</p>
<h3>Step 1 - Install Git</h3>
<p>You can, of course, compile Git from source, but I'm not that hardcore. Lucky for me (and maybe you), there's a Google Code project that provides an <a href="http://code.google.com/p/git-osx-installer/downloads/list?can=3&q=&colspec=Filename+Summary+Uploaded+Size+DownloadCount+UploadedBy" target="_blank">OS X installer for Git</a>. As of this blog post I used the one labelled <em>Git Installer 1.6.5 - OS X - Leopard - Intel</em>. The download is a disk image with an installer package, a readme and a shell script. Run the installer first. The shell script, called <em>setup git PATH for non-terminal programs.sh</em> allows non-terminal programs access to Git.  I have no idea if I need that, but I ran it anyway. Note that I had to change the permissions on the file in order to run it via terminal. Your Mac should now be able to run Git. You can test the installation by opening up a terminal window and typing:
<code>git --version</code>
</p>
<p>You should see a message saying something like: "git version 1.6.5"</p>
<h3>Step 2- Create an Account on GitHub</h3>
<p>Sign up for a <a href="https://github.com/signup/free" target="_blank">free open source account</a> at GitHub. You only need to provide a Username, Email Address and Password. Leave the SSH Public Key blank for now (unless you know what you're doing and have one already). Note that the Username that you choose will be used to identify all of your projects on GitHub, so choose wisely.</p>
<h3>Step 3 - Import an Existing SVN Repository</h3>
<p>You don't have to do this, but it's what I did, so I'm including the steps here. First, create a new repository. There will probably be links on your GitHub dashboard to do this, or you can go straight to the <a href="http://github.com/repositories/new" target="_blank">Create a New Repository form</a>. Give your project a name and description. You can also point to an external URL if one already exists for your project (e.g., a RIAForge project page), and click <em>Create Repository</em>. On the next page you should see a link near the bottom that says "Importing a Subversion Repo? Click here", so click there.  You'll see a screen allowing you to import a repository from an SVN server. Note that currently this only works for public SVN repos. Enter the URL to your SVN repo and click the <em>Import SVN Authors Button</em>. GitHub will attempt to grab all of the authors from your SVN repo. On the next screen you can either assign a GitHub Username to each of the authors found, or to none of them. It's an all or nothing thing. Make up your mind, and then click the <em>Import Repository</em> button. GitHub will then import your SVN repository in the background.  This can take as little as a few minutes and up to several hours. You should receive an email when the import has finished.
</p>
<h3>Step 3 - Configure your Mac to Talk to GitHub</h3>
<p>To tell Git that you want to communicate with GitHub, open a terminal window and type the following:
<code>git config --global user.name "your_github_username"
git config --global user.email "your_email_address"
git config --global core.autocrlf input
</code>
<p>That last command was something that I picked up from Mike Henke, that addresses issues with how Git deals with CRLFs.</p>
<p>Next, you need to create a public key and give it to GitHub. I'm assuming that you don't already have one (I didn't), so here's the process to create one. Note that in all of the steps where you have to type something, type everything following the colon, but don't include the double quotes.
<ol>
	<li>Open a terminal window.</li>
	<li>Type: "cd ~/.ssh"</li>
	<li>If you get an error message like: "-bash: cd: /Users/username/.ssh: No such file or directory" then you can create a .ssh directory by typing: "mkdir .ssh". After you create the directory you should then be able to type: "cd ~/.ssh".</li>
	<li>Type: "ssh-keygen". You'll see a message like: "Generating public/private rsa key pair.", followed by a prompt like: "Enter file in which to save the key (/Users/username/.ssh/id_rsa):". Just press the return key to accept the default.</li>
	<li>You'll be prompted to: "Enter passphrase (empty for no passphrase):". Type a passphrase that you'll be able to remember.</li>
	<li>You'll be prompted to: "Enter same passphrase again:". Do it.</li>
	<li>You should then see a few messages indicating that your identification has been saved, your public key has been saved and showing you a key fingerprint. That's it, you're done generating your keys.</li>
</ol></p>
<p>Now you need to copy the contents of your public key and paste it to GitHub. The easiest way to copy it is to type: "cat id_rsa.pub | pbcopy" from the same terminal window, which will place the contents of the file onto your clipboard. Then go to your <a href="https://github.com/account" target="_blank">GitHub Account Overview page</a> and in the section entitled "SSH Public Keys", choose to <em>add another public key</em> and paste the contents of the clipboard into the <em>key</em> textarea, and click <em>Add Key</em>.</p>
<h3>Get a Copy of Your Git Repo on Your Local Machine</h3>
<p>If you go to the home page for your project on GitHub, which is something like http://github.com/username/projectname/, you should see a link labelled <em>Your Clone URL</em>. If you click it you should see a window popup with a command in it, which will look something like "git clone git@github.com:username/projectname.git".
Open up a terminal window and navigate to a folder into which you want to store your Git repos, for example <em>/Users/username/Documents/gitRepos</em>, and then type in the command. Git should connect to GitHub and download a clone of your repo to your machine, at which point you can now work with it.</p>
<p>I am documenting all of this a few days after having done it, so I hope I haven't left anything major out.  If you try it and run into difficulties please leave a comment and if I find that anything is missing I'll update the post.</p>

