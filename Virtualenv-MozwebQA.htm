Getting Started with virtualenv and virtualenvwrapper in Python

<p>There are a couple of tools which can be extremely useful when developing with Python on your local system that I would encourage you to try. These are virtualenv and virtualenvwrapper, and this post will introduce you to them, including instructions for their installation and use.</p>

<p><strong>What is virtualenv?</strong></p>
<p><a href="http://pypi.python.org/pypi/virtualenv">virtualenv</a> is a tool that allows you to create isolated Python environments, which can be quite helpful when you have different projects with differing requirements. As this is the case with many Mozilla Web QA projects it can be indispensible when working on those.</p>

<p><strong>What is virtualenvwrapper?</strong></p>
<p><a href="http://www.doughellmann.com/docs/virtualenvwrapper/index.html">virtualenvwrapper</a> is just that, a wrapper utility around virtualenv that makes it even easier to work with. I admit that I have never used virtualenv without virtualenvwrapper, and I do not intend to. For that reason this post will only cover working with virtualenv via virtualenvwrapper. Note also that virtualenvwrapper is a set of shell functions that are guaranteed to work in the following shells:
    <ul>
        <li>bash</li>
        <li>ksh</li>
        <li>zsh</li>
    </ul>
</p>
<p>It may run under other shells, and there is a Windows version available called <a href="http://pypi.python.org/pypi/virtualenvwrapper-win">virtualenvwrapper-win</a></p>

<p><strong>Installation</strong></p>
<p>Both virtualenv and virtualenvwrapper can be installed via pip. Install virtualenv first and then virtualenvwrapper. Use the following commands to install them:
<code>pip install virtualenv
pip install virtualenvwrapper</code></p>

<p><strong>Configuration</strong></p>
<p>In order to use virtualenvwrapper you should add two lines to your shell startup file (e.g., .bash_profile):
<code>export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh</code></p>
<p>The first line tells virtualenvwrapper where to store the virtualenvs that will be created and used. The example above stores them in a folder called <em>.virtualenvs</em> inside your home folder. The first line runs the shell script to set up the virtualenvwrapper commands and should point to the location where virtualenvwrapper was installed.</p>

<li>Type <strong>0</strong>, or choose the first option (<em>Edit configurations...</em>) from the select list.</li>
    <li>In the <em>Run</em> dialog, expand <em>Defaults > Python's test</em> and click on<em>py.test</em>.</li>
    <li>Make sure the Python interpreter that you want to use for this project is selected for <em>Python interpreter</em>.
    If you are using virtualenv you may have to configure a new Python interpreter for your virtualenv. More on that in a separate post.</li>
    <li>Choose the root of your project for <em>Working directory</em>.</li>
    <li>Click <em>Apply</em>, then <em>Close</em>.</li>
</ol></p>

<p><strong>Step 3 - Create a pytest.ini file in the root of your project</strong></p>
<p>This is necessary to pass command line options to py.test. It would be nice if there were a way to do this via the IDE, but I was not able to do it. If anyone knows how, or can figure out how, to do that I'd love to know. I <em>was</em> able to pass a single option to the command line from PyCharm, but could not get it to work with multiple options.
<ol>
    <li>Create a file called <em>pytest.ini</em> in the root of your project.</li>
    <li>Add the command line options you need into that file under the <em>[pytest]</em> section. See below for an example from <em>marketplace-tests.</em></li>
    <li>Click <em>OK</em>.</li>
</ol>
<code>[pytest]
addopts = --driver=firefox --credentials=mine/credentials.yaml --destructive</code></p>

<p><strong>Step 4 - Create a copy of credentials.yaml in a personal folder</strong></p>
<p>You are going to have to edit <em>credentials.yaml</em> to place some actual credentials in it, so in order to not have it overwitten each time you do a pull, you should put a copy that you are going to use somewhere else. I tend to create a <em>/mine</em> folder under the project root and place it there, but you can put it anywhere you like. You will notice that the command line option above uses that <em>/mine</em> folder to locate the credentials file.</p>

<p><strong>Step 5 - Run your tests</strong></p>
<p>With a file that contains tests open in an editor window, type <strong>ctrl + shift + R</strong> and PyCharm will run all of the tests in the file. If you wish to run just one test, type <strong>ctrl + alt + R</strong>, followed by <strong>0</strong> to open the <em>Edit configurations...</em> dialog and then place the name of your test in the <em>Keywords</em> input. Click <strong>Run</strong>.</p>
