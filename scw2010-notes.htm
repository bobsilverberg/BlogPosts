What is Software Craftsmanship?

Software Crafstmanship is a <em>movement</em>, for lack of a better word, in the software development industry that I have been following for
the better part of the past year. I'll follow the tired, yet often helpful, practice of quoting the 
<a href="http://en.wikipedia.org/wiki/Software_craftsmanship" target="_blank">Wikipedia definition</a> to give you a bird's eye view:</p>
<blockquote>
<p>Software craftsmanship is an approach to software development that emphasizes the coding skills of the software developers themselves. 
It is a response by software developers to the perceived ills of the mainstream software industry, 
including the prioritization of financial concerns over developer accountability.</p>
<p>Historically programmers have been encouraged to see themselves as practitioners of the statistical and mathematical rigor 
of an engineering approach with the connotations of predictability, precision, mitigated risk and professionalism. 
This perspective led to calls for licensing, certification and codified bodies of knowledge as mechanisms for maturing the field.</p>
<p>The Agile Manifesto, with its emphasis on "individuals and interactions over processes and tools" questioned some of these assumptions. 
The Software Craftsmanship Manifesto extends and challenges further the assumptions of the Agile Manifesto, 
drawing a metaphor between modern software development and the apprenticeship model of medieval Europe.</p>
</blockquote>
<p>Now I'm far from an expert on Software Craftsmanship. In fact I'd say it would be a stretch to even refer to myself as part of the movement,
but I am definitely a fan. A big fan. There are certain aspects of what I understand Software Craftsmansip to be that really speak to me,
not just as a developer but as a person. I've learned pretty much all that I know about Software Craftsmanship by reading blog posts by some of the
movement's most knowledable and eloquent members, and I also subscribe to the 
<a href="http://groups.google.com/group/software_craftsmanship" target="_blank">Software Craftsmanship mailing list</a>.</p>
<p>I've long been interested
in writing about the topic in the hopes of sharing it with members of our community, but, to be perfectly honest, I've been wary of writing
about something of which I know so little. Let me rephrase that. I feel like I <em>do</em> know a reasonable amount about it, 
but every time I think about writing a blog post on the subject
I start doing research and then, several hours later, realize that I have only succeeded in learning that there is even more that I do not know.</p>
<p>So why am I writing this post? I have a very simple, and somewhat arbitrary reason for
doing so. This week has been declared Software Craftsmanship Week by some members of the movement. It is a week designed to promote the 
ideas of Software Craftsmanship, and to attempt to share those ideas with people outside of the movement. This was exactly the kick in the
pants that I needed to start trying to share these ideas with our community. The idea of Software Craftsmanship Week is to write one post a day
for an entire week on the subject of Software Craftsmanship, and I'm going to try to accomplish that terrifying feat. You may have noticed that
I haven't done a very good job of answering the question asked in the title of this post. I'm giving myself a week to do so. I hope, both for
your sake and mine, that by the end of this week you <em>will</em> have a better idea of what Software Craftsmanship is. Wish me luck!</p>

As I've already said, some of the ideals 
of Software Craftsmanship are very important to me, so I want to try to do my part by sharing these ideas with the readers of my blog.
I have a strong suspicion that many of you will not have heard of Software Craftsmanship, but may very well appreciate many of the ideas as I do
myself.

To give you an example of what I mean, of the three paragraphs that I quoted from Wikipedia above, only the first really speaks to why I am
so drawn to Software Craftsmanship. I appreciate the importI'd say that the first paragraph really summarizes what
Software Craftsmanship means to me. I'm not going to go into any of this in a great amount of detail in this post, as I need to leave myself material
for the rest of the week

From Uncle Bob @ http://blog.objectmentor.com/articles/2009/03/07/quality-its-alive-its-alive:

Recently James Bach wrote a compelling post entitled Quality is Dead (http://www.satisfice.com/blog/archives/224). As much as IÕd like to agree, something interesting has just happened that tempts me to believe in a rebirth.

Just when James finally declares the death of quality, along comes the Manifesto for Software Craftsmanship. This simple document that builds upon the four values declared in the Agile Manifesto went live late on Friday evening. Now, at 3PM on Saturday over 600 people have signed it!

Ideas:
- Attempt to summarize James Bach's "Quality is Dead" post.
- Attempt to discuss the birth of the Sotware Craftsmanship movement.

Uncle Bob: http://blog.objectmentor.com/articles/2010/04/28/sufficient-design-means-damned-good-design
- SC's are pragmatists, not perfectionists

Uncle Bob on Katas: http://blog.objectmentor.com/articles/2009/11/21/whats-all-this-nonsense-about-katas

Software Craftsmanship book on google books - http://books.google.ca/books?id=C9vvHV1lIawC&dq=what+is+software+craftsmanship%3F&printsec=frontcover&source=bn&hl=en&ei=S1XlS-eeN4T78AahtfiBDA&sa=X&oi=book_result&ct=result&resnum=4&ved=0CCwQ6AEwAw#v=onepage&q&f=false
- the author: http://www.mcbreen.ab.ca/index.html
- the author's link to the book: http://www.mcbreen.ab.ca/SoftwareCraftsmanship/

SCNA Conference - http://scna.softwarecraftsmanship.org/

Software Craftsmanship blog - http://softcraft.blogspot.com/

A newer book on the subject - http://oreilly.com/catalog/9780596518387/

8th light blog - definition of a software craftsman - http://blog.8thlight.com/articles/2008/9/22/definition-of-software-craftsman
http://blog.8thlight.com/craftsmanship



