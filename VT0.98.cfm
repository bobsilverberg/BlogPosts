ValidateThis 0.98 - A Ton of New Stuff, and Two Important Changes

I've just released version 0.98 of <a href="http://www.validatethis.org/" target="_blank">ValidateThis</a>, my validation framework ColdFusion. 
This update has been long in the making, and has been contributed to significantly by a number of folks including 
<a href="http://adamdrew.me/blog/" target="_blank">Adam Drew</a>, <a href="http://blog.mxunit.org/" target="_blank">Marc Esher</a>,
<a href="http://chris.m0nk3y.net/" target="_blank">Chris Blackwell</a> and <a href="http://www.aliaspooryorik.com/" target="_blank">John Whish</a>. 
As always, the latest version can be downloaded from <a href="http://validatethis.riaforge.org/" target="_blank">the ValidateThis RIAForge site</a>.
There are so many new features and enhancements that I'm going to divide them up into a number of posts, so this post will
just include a summary, as well as a discussion of a couple of important changes that will impact all existing users. I'm going to start with a discussion of these changes.</p>
<h3>The Folder Structure of the Distribution has Changed</h3>
<p>A big thanks to Adam Drew for reorganizing the code repository and the distribution for the framework.
This change won't impact any of your code, but it does mean that what you do with the download, in terms of which folders go where, has changed.
The framework itself is now contained in the root of the distribution, whereas before it was in a folder called ValidateThis.
This means that you can simply unzip the entire zip file into your local /ValidateThis folder.  The sample applications are now 
contained in a folder called /samples, so if you don't want to include these in your project, simply delete this /samples folder after unzipping, 
or move it elsewhere.</p>
<h3>A Change to Metadata that Needs Your Attention</h3>
<p>In order to add a cool new enhancement (dynamic parameters) I've had to revisit the way that metadata for parameters was being specified.
This examination led me to change the format of the <em>param</em> element. Because of this format change, any rules that you may currently
have defined that use parameters will need to be changed as well, in order to use this and all future releases of the framework.</p>
<p>The good news is that the change is simple and easy, and Marc Esher has even contributed a regular expression that can be used to automatically
update all of your xml files via Eclipse. The truth is that the previous format was actually flawed,
so not only will this new format enable this cool new feature, but it will also position the framework better for future enhancement.</p>
<p>The specific change is as follows: 
It is now a requirement to specify a <em>name</em> and <em>value</em> attribute for the <em>param</em> element,
whereas prior to this version neither were required (nor even supported).</p>
<p>To illustrate this change, the following examples of rules using <em>param</em> elements in both the old format and the new format,
 both in xml and json, have been provided:</p>
<p><h4>Old (unsupported) xml format:</h4>
<code><property name="UserPass" desc="Password">
	<rule type="rangelength">
		<param minlength="5" />
		<param maxlength="10" />
	</rule>
</property></code></p>
<p><h4>New xml format:</h4>
<code><property name="UserPass" desc="Password">
	<rule type="rangelength">
		<param name="minlength" value="5" />
		<param name="maxlength" value="10" />
	</rule>
</property></code></p>
<p><h4>Old (unsupported) json format:</h4>
<code>{"name":"UserPass","desc":"Password",
	"rules" : [
		{"type":"rangelength",
			"params" : [
				{"minlength":"5"},
				{"maxlength":"10"}
			]
		}
	]
}</code></p>
<p><h4>New json format:</h4>
<code>{"name":"UserPass","desc":"Password",
	"rules" : [
		{"type":"rangelength",
			"params" : [
				{"name":"minlength","value":"5"},
				{"name":"maxlength","value":"10"}
			]
		}
	]
}</code></p>
<h3>What You Need To Do</h3>
<p>So, what do you have to change? Based on the format change described above, 
you'll have to change any rules in your files that use the <em>param</em> element. This is a fairly simple change, and, as I mentioned,
Marc Esher has provided a regular expression that can be used with Eclipse's find and replace feature.
In the Eclipse dialog, use the following values:</p>
<p><h4>Find:</h4>
<code><param (.*?)="(.*?)"</code></p>
<p><h4>Replace:</h4>
<code><param name="$1" value="$2"</code></p>
<p>Make sure the "Regular Expressions" checkbox is checked.</p>
<h3>Summary of Enhancements</h3>
<p>With that out of the way, here is a quick summary of the enhancements and changes included in this release:
<ul>
	<li>New defaultFailureMessagePrefix configuration option allows you to change the prefix on all failure messages generated by the framework.</li>
	<li>Dynamic parameters for rules are now supported. Parameters can be specified as values, expressions or property names.</li>
	<li>Methods used with the Custom validation type can now return simply true or false.</li>
	<li>Some methods have been added to the framework facade to allow for debugging, testing, administration and extension.</li>
	<li>Removed the jQuery.noConflict() code as it was causing issues in some installations.</li>
	<li>Added a getRequiredPropertiesAndDescs(context) method to the BOValidator.</li>
	<li>Updated the Range validation type to allow for date ranges.</li>
	<li>Changes have been made to the structure of client-side validators (ClientRuleScripters) - custom built CRSs may need to be updated.</li>
	<li>Added a hasParameter(name) and an addParameter(name,value,type) method to the Validation object, to be used by custom ServerRuleValidators.</li>
	<li>Fixed a bug fix in rules/context ordering.</li>  	
	<li>Added a loadValidators() method to the ValidationFactory object, to allow for pre-loading of validators.</li>
	<li>Reorganized the repo and distribution changing the location of the framework, the sample apps and the tests.</li>
	<li>The VT facade is now available inside the Validation object - can be used for development of new validation types.</li>
	<li>Updated the EqualTo validation to pick up the ComparePropertyDesc from the validation metadata if it is not explicitly specified.</li> 
	<li>Changed the Numeric validation type to use isNumeric() instead of isValid("Numeric"), and changed the Date validation type to use isDate() instead of isValid("Date").</li>
	<li>Added a createWrapper(struct|object) function to the ValidationFactory and exposed it through the facade to allow a developer to prepare objects|structures for validation using a BOValidator directly.</li>
	<li>When validating a struct you can now pass in a JSON string the contains a struct in addition to a native CF struct.</li>
	<li>New validation types have been added. These are described in the <a href="http://www.validatethis.org/docs/wiki/Validation_Types_Supported_By_ValidateThis.cfm" target="_blank">VT documentation</a>, and will also be described in greater detail in a future post.
		<ul>
			<li>DateRange</li>
			<li>DoesNotContainOtherProperties</li>
			<li>False</li>
			<li>FutureDate</li>
			<li>InList</li>
			<li>IsValidObject</li>
			<li>NoHTML</li>
			<li>NotInList</li>
			<li>PastDate</li>
			<li>Patterns</li>
			<li>Size</li>
			<li>True</li>
			<li>URL</li>
			<li>Expression</li>
		</ul>
	</li>
</ul>
</p>
<p>Once again, the latest code is available from <a href="http://validatethis.riaforge.org/" target="_blank">the ValidateThis RIAForge site</a>, and if you have any questions about the framework, or suggestions for enhancements, please send them to the <a href="http://groups.google.com/group/validatethis" target="_blank">ValidateThis Google Group</a>.
And I'd like to again thank Adam, Marc, Chris and John for their contributions to the framework.</p>
