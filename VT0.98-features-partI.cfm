What's New in ValidateThis 0.98 - Part I

As a follow-up to my post announcing the availability of version 0.98 of ValidateThis, which just included a brief summary of the new features, this post will describe some of those features in more detail.</p>
<h3>defaultFailureMessagePrefix Configuration Option</h3>
<p>When a validation fails the framework adds a failure message to the Result object that is returned to you. Each validation type has a default failure message, 
and you also have the option of overriding the default failure message using the <em>failureMessage</em> attribute of the <em>rule</em> element. 
The default messaged generated by VT are customized based on the type of failure and any parameters that were in place for the rule.
For example, if a rule of type <em>email</em> which is defined on the <em>emailAddress</em> property of your object fails, the message will read "The Email Address must be a valid email address."
If you've defined a rule of type <em>rangeLength</em> with a <em>minLength</em> of 5 and a <em>maxLength</em> of 20 on the <em>password</em> property of your object, the default failure
message will read "The Password must be between 5 and 20 characters.</p>
<p>Some folks weren't keen on the word "The" being prepended to all of these default messages, so we've introduced a configuration option to change that behaviour. The new option is called
<em>defaultFailureMessagePrefix</em>, and its default value is "The ", which duplicates the existing behaviour of the framework. If you want to, for example, remove the leading "The ", you can
simply pass an empty string into the <em>defaultFailureMessagePrefix</em> configuration option. For more information on configuring the framework, 
please refer to the <a href="http://www.validatethis.org/docs/wiki/ValidateThisConfig_Struct.cfm" target="_blank">Configuring the Framework</a> page in the online
documentation.</p>
<h3>Support for Dynamic Parameters</h3>
<p>Many rule types accept parameters. For example, the <em>rangeLength</em> type accepts parameters for <em>minLength</em> and <em>maxLength</em>, which allows you to specify how the rule should behave.
For the most part it makes sense for the value of those parameters to be a constant. For example, the password property must be between 5 and 15 characters. You would define such a rule like so:
<code><property name="password">
	<rule type="rangeLength">
		<param name="minLength" value="5" />
		<param name="maxLength" value="10" />
	</rule>
</property></code></p>
<p>There may be times, however, when you want the value of a parameter to be dynamic. For example, let's say you use the new <em>dateRange</em> rule type and you want to specify that the date
must be between today and 5 days from today. Putting a constant into your rule definition won't work in that case. What you really need is an expression that can be evaluated when the rule is
checked. To support use cases such as this (and even more) we've added the notion of <em>types</em> to the <em>parameter</em> element. The default type is <em>value</em>, which is exactly
how the <em>parameter</em> element behaved prior to this release. The <em>value</em> type tells VT to use the value that you specify in your metadata "as is". To support dynamic
parameters which can be evaluated at run time, we've added a new type called <em>expression</em>, when VT sees the <em>expression</em> type it will not just use your parameter
value as is, rather it will evaluate whatever has been specified in the parameter's <em>value</em> attribute. So to describe the date-based rule as described above, we could specify:
<code><property name="startDate">
	<rule type="dateRange">
		<param name="minDate" value="now()" type="expression" />
		<param name="maxDate" value="dateAdd('d',5,now())" type="expression" />
	</rule>
</property></code></p>
<p>This would ensure that the <em>startDate</em> property contained a date between today and five days from now.</p>
<p>Not only are expressions supported, but there is a third type available which is <em>property</em>. The <em>property</em> type tells VT that the value specified contains the name of another 
property. One use case for the <em>propertyType</em> would be if you have a <em>startDate</em> and an <em>endDate</em> property and you want to make sure the <em>endDate</em> is <em>after</em>
the <em>startDate</em>. You could do that using the new <em>futureDate</em> validation type, like so:
<code><property name="endDate">
	<rule type="futureDate">
		<param name="after" value="startDate" type="property" />
	</rule>
</property></code></p>
<h3>Custom Validation Type Can Use Methods that Return a Boolean</h3>
<p>Prior to this release, in order to use the <em>custom</em> validation type, you had to create a special method in your object which VT 
could call, which returned a structure with keys expected by VT. Specifically, your method had to return a struct with an <em>IsSuccess</em> key that contained a boolean value,
and a <em>failureMessage</em> key which returned the failure message to place in the Result object. As of version 0.98, you can now use a method in a <em>custom</em> validation
type that simply returns a boolean value. This allows you to reuse methods that you may already have in your domain object, and also means that your domain object does not need
to be coupled to VT in any way in order to use the <em>custom</em> type.</p>
<p>Note that if you do make use of a method that just returns a simple boolean value, you won't be able to assign a custom failure message from within your method, so you'll
need to override the default failure message via the <em>failureMessage</em> attribute of the <em>rule</em> element.</p>
<h3>getRequiredPropertiesAndDescs() Method Now Available</h3>
<p>A new method was added, which is available through the VT Facade object, called <em>getRequiredPropertiesAndDescs</em>. This method accepts an optional <em>context</em> argument,
and will return to you a structure where each key is the name of a required property and the value of each key is that property's description. This can be useful when generating a UI
in which you want to identify the required properties to a user.</p>
<h3>But Wait, There's More</h3>
<p>Those are only some of the changes and new features added to ValidateThis in version 0.98.  Stay tuned for more blog posts about other enhancements.</p>
<p>As always, the latest code is available from <a href="http://validatethis.riaforge.org/" target="_blank">the ValidateThis RIAForge site</a>, and if you have any questions about the framework, or suggestions for enhancements, please send them to the <a href="http://groups.google.com/group/validatethis" target="_blank">ValidateThis Google Group</a>.</p>
