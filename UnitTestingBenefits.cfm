Some Benefits of Unit Testing

I must start by saying that, as much as I like option groups, I <em><strong>love</strong></em> Unit Testing.  I had written previously that <a href="http://www.silverwareconsulting.com/index.cfm/2008/7/7/I-Like-Unit-Testing">I Like Unit Testing</a>, but that brief infatuation has blossomed into a full blown love affair.  I have two people/groups to thank for that, <a href="http://www.fancybread.com/blog/" target="_blank">Paul Marcotte</a> and <a href="http://mxunit.org/" target="_blank">the MXUnit Team</a>, who produce an excellent suite of unit testing tools for ColdFusion.</p>
<p>I met with Paul in the Toronto airport a couple of weeks ago during a brief stopover (his, not mine) and he walked me through his current methodology for unit testing.  He really cleared up some areas of confusion for me, and essentially handed over a set of practices that makes everything oh so easy.  He's been blogging about his technique in <a href="http://www.fancybread.com/blog/index.cfm/Test-Driven-Development" target="_blank">a series</a> that I heartily recommend.</p>
<p>And what can I say about <a href="http://mxunit.org/" target="_blank">MXUnit</a> that hasn't already been said?  It totally rocks!  The Eclipse Plugin is da bomb!  If you haven't checked it out, do so.  Now.  'Nuff said.</p>
<p>So when do I get to hear about "Some Benefits of Unit Testing", you may be asking?  Read on.
<more/>
This post was actually inspired by <a href="http://groups.google.com/group/mxunit/browse_thread/thread/1f88ef27d705e968" target="_blank">a conversation</a> on the <a href="http://groups.google.com/group/mxunit" target="_blank">MXUnit Google Group</a>.  They were discussing the difficulty of making inroads with TDD in a corporate culture that undervalues "quality" software.  This made me think about that fact that, as a one-man shop, I don't really face that difficulty, but also about the fact that I see other benefits of unit testing, over and above that of producing quality software.  Some of these benefits may be due to the fact that I've only been attempting to change my development style to a more OO approach over the past year or so, so they may not be relevant to everyone, but here goes:
<ul>
	<li>I find that maintenance, whether it be bug fixes or incremental enhancements, can be completed much faster when I have a pre-existing set of unit tests for a component.  Of course one has to take the time to produce those tests at the beginning, but even if "quality" isn't seen as of extreme importance, most shops realize that a tremendous amount of time, and therefore money, is spent on maintenance activities.</li>
	<li>I find that it helps greatly in both refactoring existing code and in writing new OO code from scratch.  This may just be me being a newb to OO development, but I find that writing out the unit tests often helps me figure out how to structure my model.  In the process of writing a unit test, I may realize that a method is doing too much and should be subdivided, or even that a method belongs in a different component.  If a method seems very difficult to test I often find it is because my initial design isn't perfect, so writing the test gives me clues about how to restructure things.</li>
	<li>I find that I am actually able to develop faster, using the MXUnit plugin, than I did before.  The fact that I can change as much code as I want and then click a button and be told whether or not my code changes worked as expected is fabulous.  I believe that the time that it takes to run a page in a browser, and then visually interpret the results, over and over again, is greater than the time that it takes to write the tests themselves.</li>
</ul>
</p>
<p>And then, of course, there's the fact that you will ultimately produce higher quality software ;-)</p>
