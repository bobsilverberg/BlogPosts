Checking for JavaScript Errors with Selenium

I've recently been writing some end-to-end tests for <a href="http://www.validatethis.org" target="_blank">ValidateThis</a>, 
my validation framework for ColdFusion objects, using <a href="http://seleniumhq.org/" target="_blank">Selenium</a>. One of the things I wanted to test
were the client-side validations that the framework generates automatically. Selenium makes it very easy to test these, as I can use Selenium's
<em>assertText</em> command to locate failure messages that have been generated by the <a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/" target="_blank">jQuery Validation plugin</a>,
using XPath, and check whether the message is what I expected.</p>
<p>I found, however, that I was often getting JavaScript errors when the page first loaded (because I was working on the JS and was introducing errors),
so I was looking for a quick way to add an assert to my test to check whether any JS errors occurred. After some Googling I came to the conclusion that
there is nothing built into Selenium to support this, but there are a number of hacks that can be used to accomplish it. I'm going to describe one of them 
here. Let me state again, for the record, that this is pretty hacky. I'd love to hear from others who may have better solutions.</p>
<p>I simply add a script to my page that will catch any JS errors by intercepting the <em>window.onerror</em> event:
<code><script type="text/javascript">
	window.onerror=function(msg){
		$("body").attr("JSError",msg);
	}
</script></code></p>
<p>This will cause an attribute called <em>JSError</em> with a value corresponding to the JavaScript error message to be added to the <em>body</em> tag of my document if a JavaScript 
error occurs. Note that I'm using jQuery to do this, so this specific example won't work if jQuery fails to load. 
Then, in my Selenium test, I just use the command <em>assertElementNotPresent</em> with a target of <em>//body[@JSError]</em>.
Now, if any JavaScript errors occur on the page my test will fail and I'll know I have to address them first. If, for some strange reason, I want to
check for a particular JavaScript error, I could use the <em>assertElementPresent</em> command with a target of <em>//body[@JSError='the error message']</em>.</p>
<p>Note that I'm using this with a test fixture page, it's not an actual page that is part of an application. I'm not sure that this would be very
useful in an automated testing environment, I'm just using it for some TDDing, where I want to write an end-to-end acceptance test first, and
then write my unit tests. Getting the test to fail because of a JavaScript error is a nice way, imo, of satisfying the criteria that I must have a 
failing test before writing code to make it work. The usefullness of this technique in terms of pure testing is questionable, but I find it useful 
for my purposes, so I thought I'd put it out there for others.</p>
